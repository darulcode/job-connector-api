stages:
  - build
  - test
  - deploy

variables:
  DOCKER_REGISTRY: "docker.io"
  DOCKER_IMAGE_NAME: "yourusername/job-connector-api"
  POSTGRES_DB: "enigma_job_connector"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "123"
  JWT_SECRET: "secret"
  JWT_EXPIRATION_IN_MINUTES: 5
  JWT_ISSUER: "Enigma"
  REFRESH_TOKEN_EXPIRATION_IN_HOUR: 24
  REDIS_HOST: "job-connector-redis"
  REDIS_PORT: 6379
  POSTGRES_HOST: "job-connector-postgres"
  DOCKER_IMAGE_TAG: "latest"

before_script:
  - apt-get update -qq && apt-get install -y maven sshpass docker.io

# Build stage
build:
  stage: build
  script:
    - mvn clean install -DskipTests
    - docker build -t $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$CI_COMMIT_REF_NAME .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$CI_COMMIT_REF_NAME

## Test stage (optional, jika Anda memiliki unit test)
#test:
#  stage: test
#  script:
#    - mvn test

# Deploy stage
deploy:
  stage: deploy
  only:
    - master
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY user@your-server-ip "
      docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY &&
      docker pull $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$CI_COMMIT_REF_NAME &&
      docker stop job-connector-api || true &&
      docker rm job-connector-api || true &&
      docker run -d --name job-connector-api
      -e POSTGRES_DB=$POSTGRES_DB
      -e POSTGRES_USER=$POSTGRES_USER
      -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      -e JWT_SECRET=$JWT_SECRET
      -e JWT_EXPIRATION_IN_MINUTES=$JWT_EXPIRATION_IN_MINUTES
      -e JWT_ISSUER=$JWT_ISSUER
      -e REFRESH_TOKEN_EXPIRATION_IN_HOUR=$REFRESH_TOKEN_EXPIRATION_IN_HOUR
      -e REDIS_HOST=$REDIS_HOST
      -e REDIS_PORT=$REDIS_PORT
      -e POSTGRES_HOST=$POSTGRES_HOST
      -p 8080:8080
      $DOCKER_REGISTRY/$DOCKER_IMAGE_NAME:$CI_COMMIT_REF_NAME"
